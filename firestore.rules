
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email in [
        'stillkhaleefah@gmail.com'
        // Add other admin emails here
      ];
    }
    
    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper to check if a user is the owner of a document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper to get tournament data
    function getTournament(tournamentId) {
      return get(/databases/$(database)/documents/tournaments/$(tournamentId)).data;
    }
    
    // Helper to check if a user is the organizer of a tournament
    function isOrganizer(tournamentId) {
        return isSignedIn() && getTournament(tournamentId).organizerId == request.auth.uid;
    }

    // Users can be read by anyone, but only edited by the owner or an admin
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) || isAdmin();
      
      // Rules for subcollections of users
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
      match /pushSubscriptions/{subscriptionId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Platform settings can be read by anyone, but only written by an admin
    match /platformSettings/config {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Platform summary is admin-only
    match /platformSummary/summary {
        allow read, write: if isAdmin();
    }
    
    // Transactions can only be read by the recipient or an admin
    match /transactions/{transactionId} {
        allow read: if isSignedIn() && (isOwner(resource.data.uid) || isAdmin());
        allow create, update, delete: if isAdmin();
    }
    
    // User memberships can be created by the user, read if they are a participant, deleted by user or admin
    match /userMemberships/{membershipId} {
        allow read: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow delete: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
    }

    // Articles can be read by anyone, written by admin
    match /articles/{articleId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Player stats can be read by anyone, but only written by server-side logic (via admin SDK)
    match /playerStats/{userId} {
      allow read: if true;
      allow write: if false; // Only allow server/admin SDK writes
    }
    
    // Standings can be read by anyone, written by server-side logic
    match /standings/{standingId} {
        allow read: if true;
        allow write: if false;
    }

    // Conversations can only be accessed by participants
    match /conversations/{conversationId} {
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
            allow update, delete: if false; // Messages are immutable
        }
    }

    // Main tournament rules
    match /tournaments/{tournamentId} {
      // Anyone can read a public tournament, authenticated users can read private ones if they know the ID
      allow read: if resource.data.isPublic || isSignedIn();
      // Only admins can create/delete tournaments through this rule (users use a callable function)
      allow create: if isAdmin();
      allow update: if isOrganizer(tournamentId) || isAdmin();
      allow delete: if isOrganizer(tournamentId) || isAdmin();
      
      // Tournament subcollections
      match /teams/{teamId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && (isOrganizer(tournamentId) || request.auth.uid in resource.data.playerIds);
        allow delete: if isSignedIn() && (isOrganizer(tournamentId) || isOwner(resource.data.captainId));
        
        match /messages/{messageId} {
            allow read: if isSignedIn() && request.auth.uid in resource.data.playerIds;
            allow create: if isSignedIn() && request.auth.uid in resource.data.playerIds;
            allow delete: if false;
        }
      }
      
      match /matches/{matchId} {
        allow read: if true;
        allow create: if isOrganizer(tournamentId);
        allow update: if isSignedIn(); // Allow players and organizers to update
        allow delete: if isOrganizer(tournamentId);

        match /messages/{messageId} {
            // Only participants of the match or the organizer can interact with match chat
            function isMatchParticipant() {
                let matchData = get(/databases/$(database)/documents/tournaments/$(tournamentId)/matches/$(matchId)).data;
                let homeTeam = get(/databases/$(database)/documents/tournaments/$(tournamentId)/teams/$(matchData.homeTeamId)).data;
                let awayTeam = get(/databases/$(database)/documents/tournaments/$(tournamentId)/teams/$(matchData.awayTeamId)).data;
                return request.auth.uid in homeTeam.playerIds || request.auth.uid in awayTeam.playerIds;
            }
            allow read, create: if isSignedIn() && (isOrganizer(tournamentId) || isMatchParticipant());
            allow delete: if isOrganizer(tournamentId);
        }
      }

      match /announcements/{announcementId} {
        allow read: if true;
        allow create, update, delete: if isOrganizer(tournamentId);
      }
      
      match /messages/{messageId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow delete: if isOrganizer(tournamentId);
      }
    }
  }
}
